# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="[8DUF73Kj;0t:Y09:Miqn]BRQiHp0R2FRm^jwVD8y>z/kw=ALX[Q8abEYio;n0>a"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# UAV
# ~~~~~
# Settings to control the communication with UAVs

# Mavlink system id identifying this base station
uav.system_id=1

# Type of connection to use
# 'mock' or 'serial'
uav.connection.type=mock

# Mavlink component id used by this connection (not the web frontend),
# in case it needs to inject messages
uav.connection.component_id=1

# Delay in milliseconds between heartbeat messages injected by
# the connection 
# 0 = no heartbeats injected
uav.connection.heartbeat=2000

# Serial connection specific
uav.serial.port="/dev/ttyUSB0"
uav.serial.baud=115200
uav.serial.two_stop_bits=false
uav.serial.parity=0

# Mock connectopn specific
uav.mock.remote_system_id=42